name: Build and Test Workflow

on:
  workflow_call:
    inputs:
      dialyzer:
        description: Whether to run the dialyzer
        type: boolean
        required: false
        default: false

env:
  MIX_ENV: test

jobs:
  extract_versions:
    name: Extract info from .tool-versions
    runs-on: ubuntu-latest
    outputs:
      elixir-version: ${{ steps.set-versions.outputs.elixir_version }}
      otp-version: ${{ steps.set-versions.outputs.otp_version }}
    steps:
      - name: Checkout .tool-versions file
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .tool-versions
          sparse-checkout-cone-mode: false

      - name: Set Elixir, OTP, and Node.js versions as output
        id: set-versions
        run: |
          elixir_version=$(grep -h elixir .tool-versions | awk '{ print $2 }' | awk -F - '{print $1}')
          otp_version=$(grep -h erlang .tool-versions | awk '{ print $2 }')
          echo "elixir_version=$elixir_version" >> $GITHUB_OUTPUT
          echo "otp_version=$otp_version" >> $GITHUB_OUTPUT

  test:
    name: Test on OTP ${{ needs.extract_versions.outputs.otp-version }} / Elixir ${{ needs.extract_versions.outputs.elixir-version }}
    runs-on: ubuntu-latest
    needs: extract_versions
    env:
      otp-version: ${{ needs.extract_versions.outputs.otp-version }}
      elixir-version: ${{ needs.extract_versions.outputs.elixir-version }}

    steps:
      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ env.otp-version }}
          elixir-version: ${{ env.elixir-version }}

      - name: Checkout code
        uses: actions/checkout@v4
        with: 
          fetch-depth: 0

      - name: Cache deps
        id: cache-deps
        uses: actions/cache@v4
        env:
          cache-name: cache-elixir-deps
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.cache-name }}-

      # Define how to cache the `_build` directory. After the first run, this
      # speeds up tests runs a lot. This includes not re-compiling our project's
      # downloaded deps every run.
      - name: Cache compiled build
        id: cache-build
        uses: actions/cache@v4
        env:
          cache-name: cache-compiled-build
        with:
          path: _build
          key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.cache-name }}-
            ${{ runner.os }}-mix-

      - name: Restore PLT cache
        id: plt_cache
        if: ${{ inputs.dialyzer }}
        uses: actions/cache/restore@v4
        with:
          key: |
            plt-${{ runner.os }}-${{ env.otp-version }}-${{ env.elixir-version }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            plt-${{ runner.os }}-${{ env.otp-version }}-${{ env.elixir-version }}-
          path: |
            priv/plts

      # Conditionally bust the cache when job is re-run. Sometimes, we may have
      # issues with incremental builds that are fixed by doing a full recompile.
      # In order to not waste dev time on such trivial issues (while also
      # reaping the time savings of incremental builds for *most* day-to-day
      # development), force a full recompile only on builds that are retried.
      - name: Clean to rule out incremental build as a source of flakiness
        if: github.run_attempt != '1'
        run: |
          mix deps.clean --all
          mix clean
        shell: sh

      - name: Install dependencies
        run: mix deps.get

      - name: Check for unused dependencies
        run: mix deps.unlock --check-unused

      - name: Check for abandoned packages
        run: mix hex.audit

      - name: Create PLTs
        if: ${{ inputs.dialyzer && steps.plt_cache.outputs.cache-hit != 'true' }}
        run: mix dialyzer --plt

      # By default, the GitHub Cache action will only save the cache if all steps in the job succeed,
      # so we separate the cache restore and save steps in case running dialyzer fails.
      - name: Save PLT cache
        id: plt_cache_save
        uses: actions/cache/save@v4
        if: ${{ inputs.dialyzer && steps.plt_cache.outputs.cache-hit != 'true' }}
        with:
          key: |
            plt-${{ runner.os }}-${{ env.otp-version }}-${{ env.elixir-version }}-${{ hashFiles('**/mix.lock') }}
          path: |
            priv/plts

      - name: Compiles without warnings
        run: mix compile --warnings-as-errors

      - name: Run dialyzer
        if: ${{ inputs.dialyzer }}
        run: mix dialyzer --format github

      - name: Check Formatting
        run: mix format --check-formatted

      - name: Check code analysis
        run: mix credo --strict

      - name: Tests & Coverage
        if: false
        uses: josecfreittas/elixir-coverage-feedback-action@v1
        with:
          github_token: ${{ secrets.github_token }}
          coverage_threshold: 35
